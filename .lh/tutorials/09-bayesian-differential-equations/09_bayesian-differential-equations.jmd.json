{
    "sourceFile": "tutorials/09-bayesian-differential-equations/09_bayesian-differential-equations.jmd",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1629523595029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1629523595029,
            "name": "Commit-0",
            "content": "---\ntitle: Bayesian Estimation of Differential Equations\npermalink: /:collection/:name/\nredirect_from: tutorials/10-bayesiandiffeq/\nredirect_from: tutorials/diff_eq/\n---\n\nMost of the scientific community deals with the basic problem of trying to mathematically model the reality around them and this often involves dynamical systems. The general trend to model these complex dynamical systems is through the use of differential equations. Differential equation models often have non-measurable parameters. The popular “forward-problem” of simulation consists of solving the differential equations for a given set of parameters, the “inverse problem” to simulation, known as parameter estimation, is the process of utilizing data to determine these model parameters. Bayesian inference provides a robust approach to parameter estimation with quantified uncertainty.\n\n\n```julia\nusing Turing, Distributions, DifferentialEquations\n\n# Import MCMCChain, Plots, and StatsPlots for visualizations and diagnostics.\nusing MCMCChains, Plots, StatsPlots\n\n# Set a seed for reproducibility.\nusing Random\nRandom.seed!(14);\n```\n\n## The Lotka-Volterra Model\n\nThe Lotka–Volterra equations, also known as the predator–prey equations, are a pair of first-order nonlinear differential equations, frequently used to describe the dynamics of biological systems in which two species interact, one as a predator and the other as prey. The populations change through time according to the pair of equations:\n\n$$\\frac{dx}{dt} = (\\alpha - \\beta y)x$$\n \n$$\\frac{dy}{dt} = (\\delta x - \\gamma)y$$\n\n\n```julia\nfunction lotka_volterra(du,u,p,t)\n  x, y = u\n  α, β, γ, δ  = p\n  du[1] = (α - β*y)x # dx =\n  du[2] = (δ*x - γ)y # dy =\nend\np = [1.5, 1.0, 3.0, 1.0]\nu0 = [1.0,1.0]\nprob1 = ODEProblem(lotka_volterra,u0,(0.0,10.0),p)\nsol = solve(prob1,Tsit5())\nplot(sol)\n```\n\nWe'll generate the data to use for the parameter estimation from simulation. \nWith the `saveat` [argument](https://docs.sciml.ai/latest/basics/common_solver_opts/) we specify that the solution is stored only at `0.1` time units. To make the data look more realistic, we add random noise using the function `randn`.\n\n\n```julia\nsol1 = solve(prob1,Tsit5(),saveat=0.1)\nodedata = Array(sol1) + 0.8 * randn(size(Array(sol1)))\nplot(sol1, alpha = 0.3, legend = false); scatter!(sol1.t, odedata')\n```\n\n## Direct Handling of Bayesian Estimation with Turing\n\nPreviously, functions in Turing and DifferentialEquations were not inter-composable, so Bayesian inference of differential equations needed to be handled by another package called [DiffEqBayes.jl](https://github.com/SciML/DiffEqBayes.jl) (note that DiffEqBayes works also with CmdStan.jl, Turing.jl, DynamicHMC.jl and ApproxBayes.jl - see the [DiffEqBayes docs](https://docs.sciml.ai/latest/analysis/parameter_estimation/#Bayesian-Methods-1) for more info).\n\nFrom now on however, Turing and DifferentialEquations are completely composable and we can write of the differential equation inside a Turing `@model` and it will just work. Therefore, we can rewrite the Lotka Volterra parameter estimation problem with a Turing `@model` interface as below:\n\n\n```julia\nTuring.setadbackend(:forwarddiff)\n\n@model function fitlv(data, prob1)\n    σ ~ InverseGamma(2, 3) # ~ is the tilde character\n    α ~ truncated(Normal(1.5,0.5),0.5,2.5)\n    β ~ truncated(Normal(1.2,0.5),0,2)\n    γ ~ truncated(Normal(3.0,0.5),1,4)\n    δ ~ truncated(Normal(1.0,0.5),0,2)\n\n    p = [α,β,γ,δ]\n    prob = remake(prob1, p=p)\n    predicted = solve(prob,Tsit5(),saveat=0.1)\n\n    for i = 1:length(predicted)\n        data[:,i] ~ MvNormal(predicted[i], σ)\n    end\nend\n\nmodel = fitlv(odedata, prob1)\n\n# This next command runs 3 independent chains without using multithreading.\nchain = mapreduce(c -> sample(model, NUTS(.65),1000), chainscat, 1:3)\n```\n\nThe estimated parameters are close to the desired parameter values. We can also check that the chains have converged in the plot.\n\n\n```julia\nplot(chain)\n```\n\n### Data retrodiction\nIn Bayesian analysis it is often useful to retrodict the data, i.e. generate simulated data using samples from the posterior distribution, and compare to the original data (see for instance section 3.3.2 - model checking of McElreath's book \"Statistical Rethinking\"). Here, we solve again the ODE using the output in `chain`, for 300 randomly picked posterior samples. We plot this ensemble of solutions to check if the solution resembles the data. \n\n\n```julia\npl = scatter(sol1.t, odedata');\n```\n\n```julia\nchain_array = Array(chain)\nfor k in 1:300\n    resol = solve(remake(prob1,p=chain_array[rand(1:1500), 1:4]),Tsit5(),saveat=0.1)\n    plot!(resol, alpha=0.1, color = \"#BBBBBB\", legend = false)\nend\n# display(pl)\nplot!(sol1, w=1, legend = false)\n```\n\nIn the plot above, the 300 retrodicted time courses from the posterior are plotted in gray, and the original data are the blue and red dots, and the solution that was used to generate the data are the green and purple lines. We can see that, even though we added quite a bit of noise to the data (see dot plot above), the posterior distribution reproduces quite accurately the \"true\" ODE solution.\n\n## Lokta Volterra with missing predator data\n\nThanks to the known structure of the problem, encoded by the Lokta-Volterra ODEs, one can also fit a model with incomplete data - even without any data for one of the two variables. For instance, let's suppose you have observations for the prey only, but none for the predator. We test this case by fitting the model only to the $$y$$ variable of the system, without providing any data for $$x$$:\n\n\n```julia\n@model function fitlv2(data, prob1) # data should be a Vector\n    σ ~ InverseGamma(2, 3) # ~ is the tilde character\n    α ~ truncated(Normal(1.5,0.5),0.5,2.5)\n    β ~ truncated(Normal(1.2,0.5),0,2)\n    γ ~ truncated(Normal(3.0,0.5),1,4)\n    δ ~ truncated(Normal(1.0,0.5),0,2)\n\n    p = [α,β,γ,δ]\n    prob = remake(prob1, p=p)\n    predicted = solve(prob,Tsit5(),saveat=0.1)\n\n    for i = 1:length(predicted)\n        data[i] ~ Normal(predicted[i][2], σ) # predicted[i][2] is the data for y - a scalar, so we use Normal instead of MvNormal\n    end\nend\n\nmodel2 = fitlv2(odedata[2,:], prob1)\n```\n\nHere we use the multithreading functionality [available](https://turing.ml/dev/docs/using-turing/guide#multithreaded-sampling) in Turing.jl to sample 3 independent chains\n\n\n```julia\nThreads.nthreads()\n```\n\n```julia\n# This next command runs 3 independent chains with multithreading.\nchain2 = sample(model2, NUTS(.45), MCMCThreads(), 5000, 3, progress=false)\n```\n\n```julia\npl = scatter(sol1.t, odedata');\nchain_array2 = Array(chain2)\nfor k in 1:300\n    resol = solve(remake(prob1,p=chain_array2[rand(1:12000), 1:4]),Tsit5(),saveat=0.1)\n    # Note that due to a bug in AxisArray, the variables from the chain will be returned always in\n    # the order it is stored in the array, not by the specified order in the call - :α, :β, :γ, :δ\n    plot!(resol, alpha=0.1, color = \"#BBBBBB\", legend = false)\nend\n#display(pl)\nplot!(sol1, w=1, legend = false)\n```\n\nNote that here, the data values of $$x$$ (blue dots) were not given to the model! Yet, the model could predict the values of $$x$$ relatively accurately, albeit with a wider distribution of solutions, reflecting the greater uncertainty in the prediction of the $$x$$ values.\n\n## Inference of Delay Differential Equations\n\nHere we show an example of inference with another type of differential equation: a Delay Differential Equation (DDE). A DDE is an DE system where derivatives are function of values at an earlier point in time. This is useful to model a delayed effect, like incubation time of a virus for instance. \n\nFor this, we will define a [`DDEProblem`](https://diffeq.sciml.ai/stable/tutorials/dde_example/), from the package DifferentialEquations.jl. \n\nHere is a delayed version of the lokta voltera system:\n\n$$\\frac{dx}{dt} = \\alpha x(t-\\tau) - \\beta y(t) x(t)$$\n\n$$\\frac{dy}{dt} = - \\gamma y(t) + \\delta x(t) y(t) $$\n\nWhere $$x(t-\\tau)$$ is the variable $$x$$ at an earlier time point. We specify the delayed variable with a function `h(p, t)`, as described in the [DDE example](https://diffeq.sciml.ai/stable/tutorials/dde_example/).\n\n\n```julia\nfunction delay_lotka_volterra(du, u, h, p, t)\n   x, y = u\n   α, β, γ, δ = p\n   du[1] = α * h(p, t-1; idxs=1) - β * x * y\n   du[2] = -γ * y + δ * x * y\n   return\nend\n\np = (1.5,1.0,3.0,1.0)\nu0 = [1.0; 1.0]\ntspan = (0.0,10.0)\nh(p, t; idxs::Int) = 1.0\nprob1 = DDEProblem(delay_lotka_volterra,u0,h,tspan,p)\n```\n\n```julia\nsol = solve(prob1,saveat=0.1)\nddedata = Array(sol)\nddedata = ddedata + 0.5 * randn(size(ddedata))\n```\n\nPlot the data:\n\n```julia\nscatter(sol.t, ddedata'); plot!(sol)\n```\n\nNow we define and run the Turing model.\n\n```julia\nTuring.setadbackend(:forwarddiff)\n@model function fitlv(data, prob1)\n\n    σ ~ InverseGamma(2, 3)\n    α ~ Truncated(Normal(1.5,0.5),0.5,2.5)\n    β ~ Truncated(Normal(1.2,0.5),0,2)\n    γ ~ Truncated(Normal(3.0,0.5),1,4)\n    δ ~ Truncated(Normal(1.0,0.5),0,2)\n\n    p = [α,β,γ,δ]\n\n    #prob = DDEProblem(delay_lotka_volterra,u0,_h,tspan,p)\n    prob = remake(prob1, p=p)\n    predicted = solve(prob,saveat=0.1)\n    for i = 1:length(predicted)\n        data[:,i] ~ MvNormal(predicted[i], σ)\n    end\nend;\nmodel = fitlv(ddedata, prob1)\n```\n\nThen we draw samples using multithreading; this time, we draw 3 independent chains in parallel using `MCMCThreads`.\n\n```julia\nchain = sample(model, NUTS(.65), MCMCThreads(), 300, 3, progress=true)\nplot(chain)\n```\n\nFinally, we select a 100 sets of parameters from the first chain and plot solutions.\n\n\n```julia\nchain\n```\n\n```julia\npl = scatter(sol.t, ddedata')\nchain_array = Array(chain)\nfor k in 1:100\n    resol = solve(remake(prob1,p=chain_array[rand(1:450),1:4]),Tsit5(),saveat=0.1)\n    # Note that due to a bug in AxisArray, the variables from the chain will be returned always in\n    # the order it is stored in the array, not by the specified order in the call - :α, :β, :γ, :δ\n\n    plot!(resol, alpha=0.1, color = \"#BBBBBB\", legend = false)\nend\n#display(pl)\nplot!(sol)\n```\n\nHere again, the dots is the data fed to the model, the continuous colored line is the \"true\" solution, and the gray lines are solutions from the posterior. The fit is pretty good even though the data was quite noisy to start.\n\n## Scaling to Large Models: Adjoint Sensitivities\n\nDifferentialEquations.jl's efficiency for large stiff models has been shown in multiple [benchmarks](https://github.com/SciML/DiffEqBenchmarks.jl). To learn more about how to optimize solving performance for stiff problems you can take a look at the [docs](https://docs.sciml.ai/latest/tutorials/advanced_ode_example/). \n\n[Sensitivity analysis](https://docs.sciml.ai/latest/analysis/sensitivity/), or automatic differentiation (AD) of the solver, is provided by the DiffEq suite. The model sensitivities are the derivatives of the solution $$u(t)$$ with respect to the parameters. Specifically, the local sensitivity of the solution to a parameter is defined by how much the solution would change by changes in the parameter. Sensitivity analysis provides a cheap way to calculate the gradient of the solution which can be used in parameter estimation and other optimization tasks.\n\n\nThe AD ecosystem in Julia allows you to switch between forward mode, reverse mode, source to source and other choices of AD and have it work with any Julia code. For a user to make use of this within [SciML](https://sciml.ai), [high level interactions in `solve`](https://docs.sciml.ai/latest/analysis/sensitivity/#High-Level-Interface:-sensealg-1) automatically plug into those AD systems to allow for choosing advanced sensitivity analysis (derivative calculation) [methods](https://docs.sciml.ai/latest/analysis/sensitivity/#Sensitivity-Algorithms-1). \n\nMore theoretical details on these methods can be found at: https://docs.sciml.ai/latest/extras/sensitivity_math/.\n\nWhile these sensitivity analysis methods may seem complicated (and they are!), using them is dead simple. Here is a version of the Lotka-Volterra model with adjoints enabled.\n\nAll we had to do is switch the AD backend to one of the adjoint-compatible backends (ReverseDiff, Tracker, or Zygote) and boom the system takes over and we're using adjoint methods! Notice that on this model adjoints are slower. This is because adjoints have a higher overhead on small parameter models and we suggest only using these methods for models with around 100 parameters or more. For more details, see https://arxiv.org/abs/1812.01892.\n\n\n```julia\nusing Zygote, DiffEqSensitivity\nTuring.setadbackend(:zygote)\nprob1 = ODEProblem(lotka_volterra,u0,(0.0,10.0),p)\n```\n\n```julia\n@model function fitlv(data, prob)\n    σ ~ InverseGamma(2, 3)\n    α ~ truncated(Normal(1.5,0.5),0.5,2.5)\n    β ~ truncated(Normal(1.2,0.5),0,2)\n    γ ~ truncated(Normal(3.0,0.5),1,4)\n    δ ~ truncated(Normal(1.0,0.5),0,2)\n    p = [α,β,γ,δ]\n    prob = remake(prob, p=p)\n\n    predicted = solve(prob,saveat=0.1)\n    for i = 1:length(predicted)\n        data[:,i] ~ MvNormal(predicted[i], σ)\n    end\nend;\nmodel = fitlv(odedata, prob1)\nchain = sample(model, NUTS(.65),1000)\n```\n\nNow we can exercise control of the sensitivity analysis method that is used by using the `sensealg` keyword argument. Let's choose the `InterpolatingAdjoint` from the available AD [methods](https://docs.sciml.ai/latest/analysis/sensitivity/#Sensitivity-Algorithms-1) and enable a compiled ReverseDiff vector-Jacobian product:\n\n\n```julia\n@model function fitlv(data, prob)\n    σ ~ InverseGamma(2, 3)\n    α ~ truncated(Normal(1.5,0.5),0.5,2.5)\n    β ~ truncated(Normal(1.2,0.5),0,2)\n    γ ~ truncated(Normal(3.0,0.5),1,4)\n    δ ~ truncated(Normal(1.0,0.5),0,2)\n    p = [α,β,γ,δ]\n    prob = remake(prob, p=p)\n    predicted = solve(prob,saveat=0.1,sensealg=InterpolatingAdjoint(autojacvec=ReverseDiffVJP(true)))\n    for i = 1:length(predicted)\n        data[:,i] ~ MvNormal(predicted[i], σ)\n    end\nend;\nmodel = fitlv(odedata, prob1)\n@time chain = sample(model, NUTS(.65),1000)\n```\n\nFor more examples of adjoint usage on large parameter models, consult the [DiffEqFlux documentation](https://diffeqflux.sciml.ai/dev/).\n\n## Inference of a Stochastic Differential Equation\nA Stochastic Differential Equation ([SDE](https://diffeq.sciml.ai/stable/tutorials/sde_example/)) is a differential equation that has a stochastic (noise) term in the expression of the derivatives. Here we fit a Stochastic version of the Lokta-Volterra system.\n\nWe use a quasi-likelihood approach in which all trajectories of a solution are compared instead of a reduction such as mean, this increases the robustness of fitting and makes the likelihood more identifiable. We use SOSRI to solve the equation. The NUTS sampler is a bit sensitive to the stochastic optimization since the gradient is then changing with every calculation, so we use NUTS with a target acceptance rate of `0.25`.\n\n\n```julia\nu0 = [1.0,1.0]\ntspan = (0.0,10.0)\nfunction multiplicative_noise!(du,u,p,t)\n  x,y = u\n  du[1] = p[5]*x\n  du[2] = p[6]*y\nend\np = [1.5,1.0,3.0,1.0,0.1,0.1]\n\nfunction lotka_volterra!(du,u,p,t)\n  x,y = u\n  α,β,γ,δ = p\n  du[1] = dx = α*x - β*x*y\n  du[2] = dy = δ*x*y - γ*y\nend\n\n\nprob_sde = SDEProblem(lotka_volterra!,multiplicative_noise!,u0,tspan,p)\n\nensembleprob = EnsembleProblem(prob_sde)\n@time data = solve(ensembleprob,SOSRI(),saveat=0.1,trajectories=1000)\nplot(EnsembleSummary(data))\n```\n\n```julia\nTuring.setadbackend(:forwarddiff)\n@model function fitlv(data, prob)\n    σ ~ InverseGamma(2,3)\n    α ~ truncated(Normal(1.3,0.5),0.5,2.5)\n    β ~ truncated(Normal(1.2,0.25),0.5,2)\n    γ ~ truncated(Normal(3.2,0.25),2.2,4.0)\n    δ ~ truncated(Normal(1.2,0.25),0.5,2.0)\n    ϕ1 ~ truncated(Normal(0.12,0.3),0.05,0.25)\n    ϕ2 ~ truncated(Normal(0.12,0.3),0.05,0.25)\n    p = [α,β,γ,δ,ϕ1,ϕ2]\n    prob = remake(prob, p=p)\n    predicted = solve(prob,SOSRI(),saveat=0.1)\n\n    if predicted.retcode != :Success\n        Turing.acclogp!(_varinfo, -Inf)\n    end\n    for j in 1:length(data)\n        for i = 1:length(predicted)\n            data[j][i] ~ MvNormal(predicted[i],σ)\n        end\n    end\nend;\n```\n\nWe use NUTS sampler with a low acceptance ratio and initial parameters since estimating the parameters of SDE with HMC poses a challenge. Probabilistic nature of the SDE solution makes the likelihood function noisy which poses a challenge for NUTS since the gradient is then changing with every calculation. SGHMC might be better suited to be used here.\n\n\n```julia\nmodel = fitlv(data, prob_sde)\nchain = sample(model, NUTS(0.25), 5000, init_theta = [1.5,1.3,1.2,2.7,1.2,0.12,0.12])\nplot(chain)\n```\n\n```julia, echo=false, skip=\"notebook\"\nif isdefined(Main, :TuringTutorials)\n    Main.TuringTutorials.tutorial_footer(WEAVE_ARGS[:folder], WEAVE_ARGS[:file])\nend\n```\n"
        }
    ]
}