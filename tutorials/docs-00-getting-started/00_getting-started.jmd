---
title: Getting Started
permalink: /docs/using-turing/get-started
redirect_from: docs/0-gettingstarted/
weave_options:
  error : false
---

# Getting Started

## Installation

To use Turing, you need to install Julia first and then install Turing.

### Install Julia

You will need to install Julia 1.3 or greater, which you can get from [the official Julia website](http://julialang.org/downloads/).

### Install Turing.jl

Turing is an officially registered Julia package, so you can install a stable version of Turing by running the following in the Julia REPL:

```julia
using Pkg
Pkg.add("Turing")
```

You can check if all tests pass by running `Pkg.test("Turing")` (it might take a long time)

## Example

Here's a simple example showing Turing in action.

First, we can load the Turing and StatsPlots modules

```julia
using Turing
using StatsPlots
using Random
```

Then, we define a simple Normal model with unknown mean and variance.
We assume that the variance follows an Inverse Guassian distribution,
while the mean follows a Normal distribution. The model has an
`obs` parameter that represents the observations (the data) that the
model is shown.

```julia
@model function gdemo(obs)
    # Our prior belief about the variance
    s² ~ InverseGamma(2, 3)
    # Our prior belief about the mean
    m ~ Normal(0, sqrt(s²))
    # Iterate over each observation shown to the model 
    for n in 1:length(obs)
        # Observation means are drawn from a Normal distribution.
        obs[n] ~ Normal(m, s²)
    end
end
```

Now, let's see if our model can accurately estimate the mean and variance
of a normal distribution with mean 5 and variance 1. We can generate 100
observations from such a distribution using the `rand` function.

```julia
Random.seed!(1) # Setting the seed
data = rand(Normal(5, 1), 100)
```

Then we can use a Hamiltonian Monte Carlo (HMC) sampler to run inference and
collect results. We pass the data to our model and run 1000 iterations

```julia
chn = sample(gdemo(data), HMC(0.1, 5), 1000)
```

Finally, we can plot the results

```julia
plot(chn)
```

Looking at the summary statistics and plots generated above, mean and variance should look
close to 5 and 1, respectively. This implies that we have successfully learned a model on the
data - but it is important to verify the results! Subsequent tutorials will explore this in more detail.
