# This is a pipeline that weaves a tutorial, then uploads the resultant
# .PDF and other reports as (buildkite, not Julia) artifacts.  The `coppermind`
# configuration memoizes the result, so that identical inputs don't get
# weavd multiple times.

env:
  # Encrypted credentials to allow uploading to our S3 bucket that coppermind caches to
  SECRET_BUILDKITE_S3_ACCESS_KEY_ID: "WTTuQqw0HjdHmvlwRzeQyFz/3QOl2lVn9ZhAr+zGGh3JBNIlMKWiXQlIZdvh5d0BOIXH+hNi7t62nfltP6rZwuaPKK4G1erIkwFsr4s9H/UQLmyZRrYZsNzaXxYm34mhQe9pEvK7Ewv3RI3wEPZSs4vOXFfTMlPMllMHPOAJCTg3OJuuhLD/qMmBjmAPClpE/ZKzwhzdRvB3kRGt63NRHDia5170gNOpBYcpbt7dDonkeWtn5Ri0YFSGpfTPdMONamLq5zKLqNJcmbbU5B1lFJXpm+msckPCfI4iuY0kF27JoWDALU+X6ZoSDcdLc/qsSYvVEC5HXjJARPOevofkjA==;U2FsdGVkX18msUyQ0k4CYDnHKj7/SzHYIVaSkPu68Lw0Nf0Pg+rjiig35VTXQo1u"
  SECRET_BUILDKITE_S3_SECRET_ACCESS_KEY: "PZ/yImpWOe8AXhkHVd/AQWZv6YpNxEkJIklEVXBhOZG/MbFI75R7bNAGFgkjfB3ataZiZbeQnQha0CWnrk/62lQlnfDo7q+71Cg1SheCZxw+pHAumDUUqd6OEvHbs9wf66PNNB/lAPBZZrb/v+0E3LKxoe+Bf7WAz7DiXLsB9jdbvely3CX/xIgzUI4B5Vsg5rQ5H9UnYFoEHgiZNhUGdD+plZnJ2qNN8x4OZIMEwyBNLwpmkAmRMxjQzD3IoyGFcHuOhEr4igZ1D+XtQ5sTfW4KTKjewn7mHUldSGiBsgEhpmy6kpodsIDhhC8Ittd/DbfPS3cQknCvfj++fU/WvQ==;U2FsdGVkX19e3zOwkCXS7ceL8n+wE8Jy0ywueT/N/lu5BL0XSEB3OoseNjzLwR6iSQrx//e5N+TkVRcOIDTW3Q=="
  BUILDKITE_S3_DEFAULT_REGION: "us-east-1"

  # Encrypted SSH deploy key that allows us to deploy to SciMLTutorialsOutput
  SECRET_SSH_DEPLOY_KEY: "Ujn02S5BNLZ24iSM+ZnmesECunjdP3qgSezFeanvyoAxI7Pd/U2PMwC77NRGB2l36VmeRK/p2COfD4dbQoOHdW6liJWXL9AtRxVO96enneBD56ms9z33qGgnnPFC1zBv6NE9VuaA9G6pI+uihKxoBsFztey/ioDoWOKfvtWZXWt+gkDR6HKuRDwAklkNLmuJWgAcPm+aVKEgZnov63AEt1+5ocsFiF7ynRgnZZ4AaYQip9SDKuvrOEohI/vM7fcESoMVr6uYtAdIi6LzTWbLxqlSIc/BSPr607JrGXzV6fxL0BMII8xO+6f4CzJe0LQFz+nMtOjBm9qigpHtwwj8Yw==;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"

steps:
  - label: ":hammer: {PATH}"
    key: "tutorial-{SANITIZED_PATH}"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
      - staticfloat/coppermind:
          inputs:
            # We are sensitive to the actual tutorial changing
            - {PATH}
            # We are sensitive to the source code of this package changing
            - src/**/*.jl
            # We are sensitive to our overall dependencies changing
            - ./*.toml
          outputs:
            - html/**/*.html
            - markdown/**/*.md
            - notebook/**/*.ipynb
            - pdf/**/*.pdf
            - script/**/*.jl
          s3_prefix: s3://julialang-buildkite-artifacts/scimltutorials
    timeout_in_minutes: 360
    commands: |
      # Instantiate, to install the overall project dependencies
      echo "--- Instantiate"
      julia --project=. -e 'using Pkg; Pkg.instantiate()'

      # Run tutorial
      echo "+++ Run tutorial for {PATH}"
      julia --project=. weave_tutorials.jl "{PATH}"
    agents:
      queue: "juliacpu"
      fastcpu: true

  - label: ":rocket: Publish {PATH}"
    plugins:
      # Use coppermind to download the tutorial results that were calculated in the
      # weaving job above.  Note we still list `outputs` here, since we have the
      # option to extract only a subset of them here.
      - staticfloat/coppermind:
          input_from: "tutorial-{SANITIZED_PATH}"
          outputs:
            - html/**/*.html
            - markdown/**/*.md
            - notebook/**/*.ipynb
            - pdf/**/*.pdf
            - script/**/*.jl
          s3_prefix: s3://julialang-buildkite-artifacts/scimltutorials
      - staticfloat/ssh-agent:
          keyvars:
            - "SSH_DEPLOY_KEY"
    agents:
      queue: "juliacpu"
      fastcpu: true
    commands: .buildkite/publish_tutorials_output.sh
    # Don't run this unless we're on the master branch, and not until the actual weave
    # command has had a chance to run.
    depends_on: "tutorial-{SANITIZED_PATH}"
    branches: "master"
