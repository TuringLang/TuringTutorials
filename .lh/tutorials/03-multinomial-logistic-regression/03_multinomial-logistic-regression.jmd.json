{
    "sourceFile": "tutorials/03-multinomial-logistic-regression/03_multinomial-logistic-regression.jmd",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1629513859148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1629513859148,
            "name": "Commit-0",
            "content": "---\ntitle: Bayesian Multinomial Logistic Regression\npermalink: /:collection/:name/\nredirect_from: tutorials/8-multinomiallogisticregression/\nredirect_from: tutorials/multinomial_regression/\n---\n[Multinomial logistic regression](https://en.wikipedia.org/wiki/Multinomial_logistic_regression) is an extension of logistic regression. Logistic regression is used to model problems in which there are exactly two possible discrete outcomes. Multinomial logistic regression is used to model problems in which there are two or more possible discrete outcomes.\n\nIn our example, we'll be using the iris dataset. The goal of the iris multiclass problem is to predict the species of a flower given measurements (in centimeters) of sepal length and width and petal length and width. There are three possible species: Iris setosa, Iris versicolor, and Iris virginica.\n\nTo start, let's import all the libraries we'll need.\n\n\n```julia\n# Load Turing.\nusing Turing\n\n# Load RDatasets.\nusing RDatasets\n\n# Load StatsPlots for visualizations and diagnostics.\nusing StatsPlots\n\n# Functionality for splitting and normalizing the data.\nusing MLDataUtils: shuffleobs, splitobs, rescale!\n\n# We need a softmax function which is provided by NNlib.\nusing NNlib: softmax\n\n# Set a seed for reproducibility.\nusing Random\nRandom.seed!(0)\n\n# Hide the progress prompt while sampling.\nTuring.setprogress!(false);\n```\n\n## Data Cleaning & Set Up\n\nNow we're going to import our dataset. Twenty rows of the dataset are shown below so you can get a good feel for what kind of data we have.\n\n```julia\n# Import the \"iris\" dataset.\ndata = RDatasets.dataset(\"datasets\", \"iris\");\n\n# Show twenty random rows.\ndata[rand(1:size(data, 1), 20), :]\n```\n\nIn this data set, the outcome `Species` is currently coded as a string. We convert it to a numerical value by using indices `1`, `2`, and `3` to indicate species `setosa`, `versicolor`, and `virginica`, respectively.\n\n```julia\n# Recode the `Species` column.\nspecies = [\"setosa\", \"versicolor\", \"virginica\"]\ndata[!, :Species_index] = indexin(data[!, :Species], species)\n\n# Show twenty random rows of the new species columns\ndata[rand(1:size(data, 1), 20), [:Species, :Species_index]]\n```\n\nAfter we've done that tidying, it's time to split our dataset into training and testing sets, and separate the features and target from the data. Additionally, we must rescale our feature variables so that they are centered around zero by subtracting each column by the mean and dividing it by the standard deviation. Without this step, Turing's sampler will have a hard time finding a place to start searching for parameter estimates.\n\n\n```julia\n# Split our dataset 50%/50% into training/test sets.\ntrainset, testset = splitobs(shuffleobs(data), 0.5)\n\n# Define features and target.\nfeatures = [:SepalLength, :SepalWidth, :PetalLength, :PetalWidth]\ntarget = :Species_index\n\n# Turing requires data in matrix and vector form.\ntrain_features = Matrix(trainset[!, features])\ntest_features = Matrix(testset[!, features])\ntrain_target = trainset[!, target]\ntest_target = testset[!, target]\n\n# Standardize the features.\nμ, σ = rescale!(train_features; obsdim = 1)\nrescale!(test_features, μ, σ; obsdim = 1);\n```\n\n## Model Declaration\n\nFinally, we can define our model `logistic_regression`. It is a function that takes three arguments where\n\n- `x` is our set of independent variables;\n- `y` is the element we want to predict;\n- `σ` is the standard deviation we want to assume for our priors.\n\nWe select the `setosa` species as the baseline class (the choice does not matter). Then we create the intercepts and vectors of coefficients for the other classes against that baseline. More concretely, we create scalar intercepts `intercept_versicolor` and `intersept_virginica` and coefficient vectors `coefficients_versicolor` and `coefficients_virginica` with four coefficients each for the features `SepalLength`, `SepalWidth`, `PetalLength` and `PetalWidth`. We assume a normal distribution with mean zero and standard deviation `σ` as prior for each scalar parameter. We want to find the posterior distribution of these, in total ten, parameters to be able to predict the species for any given set of features.\n\n\n```julia\n# Bayesian multinomial logistic regression\n@model function logistic_regression(x, y, σ)\n    n = size(x, 1)\n    length(y) == n || throw(DimensionMismatch(\"number of observations in `x` and `y` is not equal\"))\n\n    # Priors of intercepts and coefficients.\n    intercept_versicolor ~ Normal(0, σ)\n    intercept_virginica ~ Normal(0, σ)\n    coefficients_versicolor ~ MvNormal(4, σ)\n    coefficients_virginica ~ MvNormal(4, σ)\n\n    # Compute the likelihood of the observations.\n    values_versicolor = intercept_versicolor .+ x * coefficients_versicolor\n    values_virginica = intercept_virginica .+ x * coefficients_virginica\n    for i in 1:n\n        # the 0 corresponds to the base category `setosa`\n        v = softmax([0, values_versicolor[i], values_virginica[i]])\n        y[i] ~ Categorical(v)\n    end\nend;\n```\n\n## Sampling\n\nNow we can run our sampler. This time we'll use [`HMC`](http://turing.ml/docs/library/#Turing.HMC) to sample from our posterior.\n\n\n```julia\nm = logistic_regression(train_features, train_target, 1)\nchain = sample(m, HMC(0.05, 10), MCMCThreads(), 1_500, 3)\n```\n\nSince we ran multiple chains, we may as well do a spot check to make sure each chain converges around similar points.\n\n```julia\nplot(chain)\n```\n\nLooks good!\n\nWe can also use the `corner` function from MCMCChains to show the distributions of the various parameters of our multinomial logistic regression. The corner function requires MCMCChains and StatsPlots.\n\n```julia\ncorner(\n    chain, MCMCChains.namesingroup(chain, :coefficients_versicolor);\n    label=[string(i) for i in 1:4]\n)\n```\n\n```julia\ncorner(\n    chain, MCMCChains.namesingroup(chain, :coefficients_virginica);\n    label=[string(i) for i in 1:4]\n)\n```\n\nFortunately the corner plots appear to demonstrate unimodal distributions for each of our parameters, so it should be straightforward to take the means of each parameter's sampled values to estimate our model to make predictions.\n\n## Making Predictions\n\nHow do we test how well the model actually predicts whether someone is likely to default? We need to build a `prediction` function that takes the test dataset and runs it through the average parameter calculated during sampling.\n\nThe `prediction` function below takes a `Matrix` and a `Chains` object. It computes the mean of the sampled parameters and calculates the species with the highest probability for each observation. Note that we do not have to evaluate the `softmax` function since it does not affect the order of its inputs.\n\n\n```julia\nfunction prediction(x::Matrix, chain)\n    # Pull the means from each parameter's sampled values in the chain.\n    intercept_versicolor = mean(chain, :intercept_versicolor)\n    intercept_virginica = mean(chain, :intercept_virginica)\n    coefficients_versicolor = [\n        mean(chain, k) for k in\n        MCMCChains.namesingroup(chain, :coefficients_versicolor)\n    ]\n    coefficients_virginica = [\n        mean(chain, k) for k in\n        MCMCChains.namesingroup(chain, :coefficients_virginica)\n    ]\n\n    # Compute the index of the species with the highest probability for each observation.\n    values_versicolor = intercept_versicolor .+ x * coefficients_versicolor\n    values_virginica = intercept_virginica .+ x * coefficients_virginica\n    species_indices = [argmax((0, x, y)) for (x, y) in zip(values_versicolor, values_virginica)]\n    \n    return species_indices\nend;\n```\n\nLet's see how we did! We run the test matrix through the prediction function, and compute the accuracy for our prediction.\n\n\n```julia\n# Make the predictions.\npredictions = prediction(test_features, chain)\n\n# Calculate accuracy for our test set.\nmean(predictions .== testset[!, :Species_index])\n```\n\nPerhaps more important is to see the accuracy per class.\n\n```julia\nfor s in 1:3\n    rows = testset[!, :Species_index] .== s\n    println(\"Number of `\", species[s], \"`: \", count(rows))\n    println(\"Percentage of `\", species[s], \"` predicted correctly: \",\n        mean(predictions[rows] .== testset[rows, :Species_index]))\nend\n```\n\nThis tutorial has demonstrated how to use Turing to perform Bayesian multinomial logistic regression. \n\n```julia, echo=false, skip=\"notebook\"\nif isdefined(Main, :TuringTutorials)\n    Main.TuringTutorials.tutorial_footer(WEAVE_ARGS[:folder], WEAVE_ARGS[:file])\nend\n```\n"
        }
    ]
}